                                                                -*- outline -*-
* Dependency to hpp-wholebody-step has been removed.
New in 4.10.0
* In graph::steeringMethod, if q1 == q2, the steering method calls the problem
  inner steering method. This avoids a failure if no loop transition has been
  set on the state containing q1.
* In class Edge,
  - different security margins for different pairs of links can
    be set for collision checking,
  - rename some methods for homogeneity with python bindings
    - applyConstraints -> generateTargetConfig
    - configConstraint -> targetConstraint,
    - from -> stateFrom, to -> stateTo,
* In class WaypointEdge,
  - specialize initialization.
* In class LevelSetEdge,
  - write documentation,
  - rename method applyConstraintsWithOffset into generateTargetConfigOnLeaf,
  - add read access to condition and parameterization constraints.
* In class GraphComponent,
  - add cost
* Add end-effector-tracjectory plugin.
* In class ManipulationPlanner,
  - call the problem PathValidation instead of the edge one.
* In class ProblemSolver
  - register contact constraints and complement in constraint graph.

New in 4.8.0
* Rewrite steering method CrossStateOptimization.
* In graph component classes (State, Edge, Graph) locked joints are handled as other numerical constraints.
  - decouple waypoint computations.

New in 4.6.0
* Add setter to relative motion matrix in edges.
* Add method Edge::neighborEdges.
* Enrich API of EndEffectorTrajectory steeringMethod.
* Fix API of Problem: make steeringMethod setter accessible.
* Always use edge validation and steering method in ManipulationPlanner.
* Make GraphPathValidation not mandatory.
* Remove SymbolicPlanner.
* Keep the default validation from hpp-core.

New in 4.1
* Reset data when inserting robot.
* Fix detection of hpp-wholebody-step.
* In GraphSteeringMethod; create a inner steering method at construction.
* Move lockedJointPtr_t to hpp-core in hpp::manipulation::ProblemSolver
* Remove unused static method Handle::createGrasp.
* Make class AxialHandle deprecated.
* Add a method createGraspAndComplement in Handle classes
* Add className static members in classes Handle and AxialHandle.
* Add a method createGraspAndComplement in Handle classes.
* Dectect pairs (constraint, complement) and replace by relative transformation.
* Make robot type hpp::manipulation::Device in ProblemSolver.
* Check input path of GraphPathValidation
* In class Roadmap call parent implementation in init method
* Rename class SymbolicComponent into LeafConnectedCompo.
* Rewrite implementation of class LeafConnectedComp.
* Add class problemTarget::State.
* Fix case where robot already exists in Device::didInsertRobot.
* Add parameter ManipulationPlanner/ExtendStep.
* Class Handle takes a mask as input.
* Update to changes about ConfigProjector::updateRightHandSize.
* Add LockedJoint before NumericalConstraint into ConfigProjector.
* GraphSteeringMethod is built with a const Problem& (not a ProblemPtr_t).
* Fix Roadmap::clear (remove symbolic components).
* Add possibility to provide placement constraint for automatic graph creation.
* Add SplineGradientBased for manipulation path
* Add possibility to set derivatives at state change to zero (SplineGradientBased).
* GraphOptimizer uses path validation of edge for optimization.
* Improve initialization of the graph and fix more const-correctness errors.
* ProblemSolver has a map of graph::GraphPtr_t.
* Prevent name collision in graph construction.

New in 1.1
* Add projector for paths.
* Add information in the tooltips of the DOT graph.

New in 1.0.2
* Fix bug when projection using WaypointEdge

New in 1.0.1
* Fix bug in WaypointEdge

New in 1.0
* Manipulation planner based on RRT.
* A graph of constraint.
* graph::Edge has 3 implementations: Edge, WaypointEdge, LevelSetEdge
* WaypointEdge supports several waypoints.
* LevelSetEdge solves the zero-probability problem.
